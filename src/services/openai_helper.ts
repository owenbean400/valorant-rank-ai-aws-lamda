import OpenAI from "openai";
import { getBeanBallerValorantRankHistory } from "./valorant_api_helper.js";
import { ResponseInputItem, ResponseOutputMessage, Tool } from "openai/resources/responses/responses.js";
import { OPENAI_API_KEY } from "../model/environment.js";

const openai = new OpenAI({
    apiKey: OPENAI_API_KEY,
});

const tools: Tool[] = [
    {
        type: "function",
        name: "get_beanballer_valorant_rank_history",
        description: "Get BeanBaller's Valorant rank history.",
        parameters: {
            type: "object",
            properties: {
                pageNumber: {
                    type: "number",
                    description: "The page number to fetch of BeanBaller's Valorant rank history. The page number is the same as the amount of games. If the not asked for page number of amount of games, assume the maximum number of games of 10.",
                    minimum: 1,
                    maximum: 10,
                },
            },
            required: ["pageNumber"],
        },
        strict: null,
    },
];

async function getAnswerChatGpt(question: string): Promise<string | null> {
    let input: ResponseInputItem[] = [
        { role: "user", content: question },
    ];

    let response = await openai.responses.create({
        model: "o3-mini",
        input: input,
        tools,
        instructions: "Have the response relate to Valorant's rank player BeanBaller. Utilize the tools to get BeanBaller Valorant gameplay history.'",
        tool_choice: "auto",
    });

    for (const item of response.output) {
        if (item.type === "function_call" && item.name === "get_beanballer_valorant_rank_history") {
            const args = JSON.parse(item.arguments);
            const beanballerRankHistory = await getBeanBallerValorantRankHistory(args.pageNumber);

            input.push({
                type: "function_call",
                call_id: item.call_id,
                name: item.name,
                arguments: item.arguments
            });

            input.push({
                type: "function_call_output",
                call_id: item.call_id,
                output: beanballerRankHistory.text,
            });
        }
    }

    response = await openai.responses.create({
        model: "o3-mini",
        instructions: "Respond relate with the BeanBaller's Valorant rank information generated by the tools. If the content is not related to BeanBaller's Valorant rank gameplay, respond with 'I am sorry, but your message is not related to Valorant's player BeanBaller.'",
        tools,
        input,
    });

    for (const output of response.output) {
        if (output.type == "message") {
            const messageOutput = output as ResponseOutputMessage;
            if (messageOutput.status == "completed") {
                for (const item of output.content) {
                    if (item.type == "output_text") {
                        return item.text;
                    }
                }
            }
        }
    }

    return null;
}

export { getAnswerChatGpt };